import { ErrorCodes, ErrorNames } from "./errors-codes";
export interface DaggerSDKErrorOptions {
    cause?: Error;
}
/**
 * The base error. Every other error inherits this error.
 */
export declare abstract class DaggerSDKError extends Error {
    /**
     * The name of the dagger error.
     */
    abstract readonly name: ErrorNames;
    /**
     * The dagger specific error code.
     * Use this to identify dagger errors programmatically.
     */
    abstract readonly code: ErrorCodes;
    /**
     * The original error, which caused the DaggerSDKError.
     */
    cause?: Error;
    protected constructor(message: string, options?: DaggerSDKErrorOptions);
    /**
     * @hidden
     */
    get [Symbol.toStringTag](): "GraphQLRequestError" | "UnknownDaggerError" | "TooManyNestedObjectsError" | "EngineSessionConnectParamsParseError" | "EngineSessionConnectionTimeoutError" | "EngineSessionError" | "InitEngineSessionBinaryError" | "DockerImageRefValidationError" | "NotAwaitedRequestError" | "ExecError";
    /**
     * Pretty prints the error
     */
    printStackTrace(): void;
}
//# sourceMappingURL=DaggerSDKError.d.ts.map