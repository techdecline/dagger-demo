/// <reference types="node" />
import { Writable } from "node:stream";
import Client from "./api/client.gen.js";
/**
 * ConnectOpts defines option used to connect to an engine.
 */
export interface ConnectOpts {
    /**
     * Use to overwrite Dagger workdir
     * @defaultValue process.cwd()
     */
    Workdir?: string;
    /**
     * Enable logs output
     * @example
     * LogOutput
     * ```ts
     * connect(async (client: Client) => {
      const source = await client.host().workdir().id()
      ...
      }, {LogOutput: process.stdout})
      ```
     */
    LogOutput?: Writable;
}
export type CallbackFct = (client: Client) => Promise<void>;
export interface ConnectParams {
    port: number;
    session_token: string;
}
/**
 * connect runs GraphQL server and initializes a
 * GraphQL client to execute query on it through its callback.
 * This implementation is based on the existing Go SDK.
 */
export declare function connect(cb: CallbackFct, config?: ConnectOpts): Promise<void>;
//# sourceMappingURL=connect.d.ts.map