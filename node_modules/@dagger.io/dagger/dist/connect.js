var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Client from "./api/client.gen.js";
import { Bin, CLI_VERSION } from "./provisioning/index.js";
/**
 * connect runs GraphQL server and initializes a
 * GraphQL client to execute query on it through its callback.
 * This implementation is based on the existing Go SDK.
 */
export function connect(cb, config = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let client;
        let close = null;
        // Prefer DAGGER_SESSION_PORT if set
        const daggerSessionPort = process.env["DAGGER_SESSION_PORT"];
        if (daggerSessionPort) {
            const sessionToken = process.env["DAGGER_SESSION_TOKEN"];
            if (!sessionToken) {
                throw new Error("DAGGER_SESSION_TOKEN must be set when using DAGGER_SESSION_PORT");
            }
            client = new Client({
                host: `127.0.0.1:${daggerSessionPort}`,
                sessionToken: sessionToken,
            });
        }
        else {
            // Otherwise, prefer _EXPERIMENTAL_DAGGER_CLI_BIN, with fallback behavior of
            // downloading the CLI and using that as the bin.
            const cliBin = process.env["_EXPERIMENTAL_DAGGER_CLI_BIN"];
            const engineConn = new Bin(cliBin, CLI_VERSION);
            client = yield engineConn.Connect(config);
            close = () => engineConn.Close();
        }
        yield cb(client).finally(() => __awaiter(this, void 0, void 0, function* () {
            if (close) {
                close();
            }
        }));
    });
}
