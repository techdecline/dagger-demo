import Client from "../api/client.gen.js";
import { ConnectOpts, EngineConn } from "./engineconn.js";
/**
 * Bin runs an engine session from a specified binary
 */
export declare class Bin implements EngineConn {
    private subProcess?;
    private binPath?;
    private cliVersion?;
    private readonly cacheDir;
    private readonly DAGGER_CLI_BIN_PREFIX;
    constructor(binPath?: string, cliVersion?: string);
    Addr(): string;
    Connect(opts: ConnectOpts): Promise<Client>;
    private downloadCLI;
    /**
     * Traverse up the directory tree to find the package.json file and return the
     * SDK version.
     * @returns the SDK version or "n/a" if the version cannot be found.
     */
    private getSDKVersion;
    /**
     * runEngineSession execute the engine binary and set up a GraphQL client that
     * target this engine.
     */
    private runEngineSession;
    private readConnectParams;
    Close(): Promise<void>;
    /**
     * createCacheDir will create a cache directory on user
     * host to store dagger binary.
     *
     * If set, it will use envPaths to determine system's cache directory,
     * if not, it will use `$HOME/.cache` as base path.
     * Nothing happens if the directory already exists.
     */
    private createCacheDir;
    /**
     * buildBinPath create a path to output dagger cli binary.
     *
     * It will store it in the cache directory with a name composed
     * of the base engine session as constant and the engine identifier.
     */
    private buildBinPath;
    /**
     * buildExePath create a path to output dagger cli binary.
     */
    private buildOsExePath;
    /**
     * normalizedArch returns the architecture name used by the rest of our SDKs.
     */
    private normalizedArch;
    /**
     * normalizedOS returns the os name used by the rest of our SDKs.
     */
    private normalizedOS;
    private cliArchiveName;
    private cliArchiveURL;
    private cliChecksumURL;
    private checksumMap;
    private expectedChecksum;
    private extractArchive;
    /**
     * Generate a unix timestamp in nanosecond
     */
    private getRandomId;
}
export declare function _overrideCLIURL(url: string): void;
export declare function _overrideCLIChecksumsURL(url: string): void;
//# sourceMappingURL=bin.d.ts.map