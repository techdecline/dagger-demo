"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUrl = exports.createAxiosHeaders = exports.createFetchHeaders = void 0;
function createFetchHeaders(axiosHeaders = {}) {
    const headers = [];
    Object.entries(axiosHeaders).forEach(([name, value]) => {
        headers.push([name, value]);
    });
    return headers;
}
exports.createFetchHeaders = createFetchHeaders;
const isHeaders = (headers) => { var _a; return ((_a = headers.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Headers'; };
function createAxiosHeaders(headers = {}) {
    const rawHeaders = {};
    if (isHeaders(headers)) {
        headers.forEach((value, name) => {
            rawHeaders[name] = value;
        });
    }
    else if (Array.isArray(headers)) {
        headers.forEach(([name, value]) => {
            if (value) {
                rawHeaders[name] = value;
            }
        });
    }
    else {
        Object.entries(headers).forEach(([name, value]) => {
            if (value) {
                rawHeaders[name] = value;
            }
        });
    }
    return rawHeaders;
}
exports.createAxiosHeaders = createAxiosHeaders;
function getUrl(input) {
    let url;
    if (typeof input === 'string') {
        url = input;
    }
    else if (input === null || input === void 0 ? void 0 : input.href) {
        url = input.href;
    }
    else if (input === null || input === void 0 ? void 0 : input.url) {
        url = input.url;
    }
    return url;
}
exports.getUrl = getUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZVV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHlwZVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVNBLFNBQWdCLGtCQUFrQixDQUFFLGVBQXVDLEVBQUU7SUFDM0UsTUFBTSxPQUFPLEdBQWUsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNyRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBTkQsZ0RBTUM7QUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQW9CLEVBQXNCLEVBQUUsV0FBQyxPQUFBLENBQUEsTUFBQSxPQUFPLENBQUMsV0FBVywwQ0FBRSxJQUFJLE1BQUssU0FBUyxDQUFBLEVBQUEsQ0FBQztBQUV4RyxTQUFnQixrQkFBa0IsQ0FBRSxVQUF1QixFQUFFO0lBQzNELE1BQU0sVUFBVSxHQUEyQixFQUFFLENBQUM7SUFFOUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUM5QixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0tBQ0o7U0FBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDakMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDaEMsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7U0FBTTtRQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNoRCxJQUFJLEtBQUssRUFBRTtnQkFDVCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFyQkQsZ0RBcUJDO0FBRUQsU0FBZ0IsTUFBTSxDQUFFLEtBQWU7SUFDckMsSUFBSSxHQUF1QixDQUFDO0lBQzVCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLEdBQUcsR0FBRyxLQUFLLENBQUM7S0FDYjtTQUFNLElBQUksS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLElBQUksRUFBRTtRQUN0QixHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztLQUNsQjtTQUFNLElBQUksS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEdBQUcsRUFBRTtRQUNyQixHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNqQjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQVZELHdCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGVhZGVycyBhcyBOb2RlSGVhZGVycyB9IGZyb20gJ25vZGUtZmV0Y2gnO1xuXG5leHBvcnQgdHlwZSBIZWFkZXJzTGlrZSA9IHN0cmluZ1tdW10gfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+IHwgSGVhZGVycyB8IE5vZGVIZWFkZXJzO1xuXG5leHBvcnQgdHlwZSBVcmxMaWtlID0gc3RyaW5nIHwge1xuICBocmVmPzogc3RyaW5nO1xuICB1cmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGZXRjaEhlYWRlcnMgKGF4aW9zSGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9KTogc3RyaW5nW11bXSB7XG4gIGNvbnN0IGhlYWRlcnM6IHN0cmluZ1tdW10gPSBbXTtcbiAgT2JqZWN0LmVudHJpZXMoYXhpb3NIZWFkZXJzKS5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgaGVhZGVycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICB9KTtcbiAgcmV0dXJuIGhlYWRlcnM7XG59XG5cbmNvbnN0IGlzSGVhZGVycyA9IChoZWFkZXJzOiBIZWFkZXJzTGlrZSk6IGhlYWRlcnMgaXMgSGVhZGVycyA9PiBoZWFkZXJzLmNvbnN0cnVjdG9yPy5uYW1lID09PSAnSGVhZGVycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBeGlvc0hlYWRlcnMgKGhlYWRlcnM6IEhlYWRlcnNMaWtlID0ge30pOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgY29uc3QgcmF3SGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gIGlmIChpc0hlYWRlcnMoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goKHZhbHVlLCBuYW1lKSA9PiB7XG4gICAgICByYXdIZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJhd0hlYWRlcnNbbmFtZSFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmVudHJpZXMoaGVhZGVycykuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJhd0hlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmF3SGVhZGVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVybCAoaW5wdXQ/OiBVcmxMaWtlKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgbGV0IHVybDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIHVybCA9IGlucHV0O1xuICB9IGVsc2UgaWYgKGlucHV0Py5ocmVmKSB7XG4gICAgdXJsID0gaW5wdXQuaHJlZjtcbiAgfSBlbHNlIGlmIChpbnB1dD8udXJsKSB7XG4gICAgdXJsID0gaW5wdXQudXJsO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG4iXX0=